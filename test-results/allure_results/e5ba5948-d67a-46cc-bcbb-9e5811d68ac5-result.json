{"name": "Check that the alert appear", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: You clicked a button\nMessage: unexpected alert open: {Alert text : You clicked a button}\n  (Session info: chrome=120.0.6099.129)\nStacktrace:\n\tGetHandleVerifier [0x00007FF614D92142+3514994]\n\t(No symbol) [0x00007FF6149B0CE2]\n\t(No symbol) [0x00007FF6148576AA]\n\t(No symbol) [0x00007FF6148E2CCC]\n\t(No symbol) [0x00007FF6148C5D93]\n\t(No symbol) [0x00007FF614894BDC]\n\t(No symbol) [0x00007FF614895C64]\n\tGetHandleVerifier [0x00007FF614DBE16B+3695259]\n\tGetHandleVerifier [0x00007FF614E16737+4057191]\n\tGetHandleVerifier [0x00007FF614E0E4E3+4023827]\n\tGetHandleVerifier [0x00007FF614AE04F9+689705]\n\t(No symbol) [0x00007FF6149BC048]\n\t(No symbol) [0x00007FF6149B8044]\n\t(No symbol) [0x00007FF6149B81C9]\n\t(No symbol) [0x00007FF6149A88C4]\n\tBaseThreadInitThunk [0x00007FFD79717344+20]\n\tRtlUserThreadStart [0x00007FFD7B2E26B1+33]", "trace": "self = <allure_commons._allure.fixture object at 0x0000027E3939FF10>, args = (), kwargs = {}\n\n    def __call__(self, *args, **kwargs):\n        self.parameters = func_parameters(self._fixture_function, *args, **kwargs)\n    \n        with self:\n>           return self._fixture_function(*args, **kwargs)\n\nvenv\\Lib\\site-packages\\allure_commons\\_allure.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:13: in driver\n    attach = driver.get_screenshot_as_png()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:838: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:849: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027E3939ED90>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"You clicked a button\"},\"error\":\"unexpected alert open\",\"message\":\"...07FF6149A88C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD79717344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD7B2E26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: You clicked a button\nE           Message: unexpected alert open: {Alert text : You clicked a button}\nE             (Session info: chrome=120.0.6099.129)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00007FF614D92142+3514994]\nE           \t(No symbol) [0x00007FF6149B0CE2]\nE           \t(No symbol) [0x00007FF6148576AA]\nE           \t(No symbol) [0x00007FF6148E2CCC]\nE           \t(No symbol) [0x00007FF6148C5D93]\nE           \t(No symbol) [0x00007FF614894BDC]\nE           \t(No symbol) [0x00007FF614895C64]\nE           \tGetHandleVerifier [0x00007FF614DBE16B+3695259]\nE           \tGetHandleVerifier [0x00007FF614E16737+4057191]\nE           \tGetHandleVerifier [0x00007FF614E0E4E3+4023827]\nE           \tGetHandleVerifier [0x00007FF614AE04F9+689705]\nE           \t(No symbol) [0x00007FF6149BC048]\nE           \t(No symbol) [0x00007FF6149B8044]\nE           \t(No symbol) [0x00007FF6149B81C9]\nE           \t(No symbol) [0x00007FF6149A88C4]\nE           \tBaseThreadInitThunk [0x00007FFD79717344+20]\nE           \tRtlUserThreadStart [0x00007FFD7B2E26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "start": 1703181336878, "stop": 1703181339871, "uuid": "53083d23-00d4-43ce-b6e6-ce9e7a982f56", "historyId": "5683eb5f5da7a9396ced97d1d0e73b8e", "testCaseId": "5683eb5f5da7a9396ced97d1d0e73b8e", "fullName": "tests.alert_frame_windows_test.TestAlerts#test_alert_appear", "labels": [{"name": "suite", "value": "Alerts Frame Windows page tests"}, {"name": "feature", "value": "Alerts"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestAlertsFrameWindows"}, {"name": "host", "value": "DESKTOP-A8V6P96"}, {"name": "thread", "value": "17148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.alert_frame_windows_test"}]}